#!/usr/bin/env node

var CLI = require('./../lib/cli')
  , pkg = require('./../package.json')
  , ArgParse = require('argparse').ArgumentParser
  , os = require('os')
  , osenv = require('osenv')
  , crypto = require('crypto')
  , path = require('path');

/*
 * Create argument parser.
 */

var parser = new ArgParse({
  version: pkg.version,
  description: pkg.description,
  addHelp: true
});

/*
 * Create argument subparser.
 */

var subParser = parser.addSubparsers({
  title: 'children',
  dest: 'action'
});

/*
 * $ sprout add
 */

var add = subParser.addParser('add', { addHelp: true });
add.addArgument(['name'], { help: 'name of template' });
add.addArgument(['src'], { help: 'source path or remote git' });

/*
 * $ sprout remove
 */

var remove = subParser.addParser('remove', { addHelp: true });
remove.addArgument(['name'], { help: 'name of template' });

/*
 * $ sprout list
 */

var list = subParser.addParser('list', { addHelp: false });

/*
 * $ sprout init
 */

var init = subParser.addParser('init', { addHelp: true });
init.addArgument(['name'], { help: 'name of template' });
init.addArgument(['target'], { help: 'destination path' });
init.addArgument(['-l', '--locals'], { help: 'locals' });
init.addArgument(['-t', '--tag'], { help: 'git tag' });
init.addArgument(['-b', '--branch'], { help: 'git branch' });

/* A helper function for determining a Sprout path.
 * @returns {String} - a path for Sprout.
 */

var userSproutPath = function () {
  var user = (osenv.user() || generateFakeUser()).replace(/\\/g, '-')
    , tmp = path.join((os.tmpdir ? os.tmpdir() : ostmpDir()), user);
  return path.join((osenv.home() || tmp), '.config', 'sprout');
}

/*
 * A helper function for generating a fake
 * user; where necessary, used to create a
 * user Sprout path.
 * @returns {String} - a fake user string.
 */

var generateFakeUser = function () {
  var uid = [process.pid, Date.now(), Math.floor(Math.random()*10000000)].join('-');
  return crypto
    .createHash('md5')
    .update(uid)
    .digest('hex');
}

/*
 * Run CLI with arguments.
 */

var cli = new CLI(process.env.SPROUT_PATH ? process.env.SPROUT_PATH : userSproutPath());
cli.run(parser.parseArgs());
